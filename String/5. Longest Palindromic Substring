/*We wanna use two pointer method to solve this problem. However, we need to make slightly change on how we deal with two pointers.
We will use two pointer from the center of character and spread to both side to find the longest palindrome. */
class Solution {
    public String longestPalindrome(String s) {
        String res=" ";
        for(int i=0 ;i<s.length();i++)
        {
            String s1=palindromStr(s,i,i); // for odd length string
            String s2=palindromStr(s,i,i+1); // for even length string
            
           res= res.length() > s1.length() ? res : s1 ;
           res= res.length() > s2.length() ? res : s2 ;
        }
        
        
     return res;  
    }
    
  public String  palindromStr(String s,int l ,int r){
      while(l>=0 && r<s.length() && s.charAt(l)==s.charAt(r))
      {
          r++;
          l--;
      }
     return s.substring(l+1,r) ;
  }
}

The time complexity will be O(N^2) and space complexity is O(1).
The for loop we use that iterate all the chars in the String s is 0(N) and we need to call palindrome function (O(N) inside the loop.
