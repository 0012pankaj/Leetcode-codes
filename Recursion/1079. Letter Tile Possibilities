class Solution {  //Idea : this quection is same as permutation we add string at every step of recursion and use hash set to avoid repetation and return size of hashset


    public int numTilePossibilities(String tiles) {
      HashSet<String> set=new HashSet<>();
       
      sub_permutation(tiles,"",set);
      return set.size();   
    }

    public static void sub_permutation(String que,String ans,HashSet<String> set)
    {  if(ans.length()>0)
          set.add(ans);
       
     for(int i=0;i<que.length();i++)
     {
        sub_permutation(que.substring(0,i)+que.substring(i+1) , ans+que.charAt(i),set); 
     }

    }
}
