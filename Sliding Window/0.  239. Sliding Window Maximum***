You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length----------------------------------------------------------------------------------
----------use sout for more understanding

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
       PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->{
           return nums[b]-nums[a];
       });
       int n = nums.length;
       int [] ans = new int[n-k+1];
       int idx=0;
       for(int i=0;i<n;i++){
           while(pq.size()>0 && pq.peek()<=i-k){  //if peek index of pq is inot in windo range remove 
          int x= pq.remove();
                  //  System.out.println(x);
               
           }
           pq.add(i);
                   // System.out.print(pq);
           if(i>=k-1){
               ans[idx++]=nums[pq.peek()]; //as peek contain max element' index always when we reach windo size  start add ans
           }
       }
      
      
       return ans;
    }
}
------------------------------------------------------------------
nums =
[1,3,-1,-3,5,3,6,7]
k =
3
Stdout
[0][1, 0][1, 0, 2][1, 0, 2, 3]1
0
[4, 3, 2][4, 5, 2, 3][6, 4, 2, 3, 5][7, 4, 6, 3, 5, 2][7, 4, 6, 3, 5, 2]
Output
[3,3,5,5,6,7]
Expected
[3,3,5,5,6,7]
--> pq contain peek index as max element always 
