
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.
Example 1:
Input: nums = [1,1,1], k = 2
Output: 2
Example 2:
Input: nums = [1,2,3], k = 3
Output: 2
Constraints:
1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107
____________________________________________________________-
Sliding Window type--> Strict constrain "=" Idea USE-> Prifix Sum+HashMap+SW
class Solution {
    public int subarraySum(int[] nums, int k) {
        int count=0;
        HashMap<Integer,Integer> map=new HashMap<>();  // creat Hashmap
        map.put(0,1);                                 //put sum=0 initially in map having count =1
        int prefix_sum=0;
        for(int i=0;i<nums.length;i++)
        {
             prefix_sum+=nums[i];
            
            if(map.containsKey( prefix_sum-k)){     //check sum-k present
                count+=map.get( prefix_sum-k);         // if present aad its count
            }
            map.put( prefix_sum,map.getOrDefault( prefix_sum,0)+1);    //add sum,count if bydefalt give 0 then it should be 1
        }
        return count;
    }
}

    // TC-->O(n)         Best approch   Engineering Digest yt
    //     Sp-->O(n) help pepcoding.yt or 
