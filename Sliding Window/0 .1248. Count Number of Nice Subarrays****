Given an array of integers nums and an integer k. A continuous subarray is called nice if there are
k odd numbers on it.

Return the number of nice sub-arrays.

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
____________________________________________________________________________________________________________
//same as target sum equals to K(560/930) (Strict constraints equal "=")=>HashMap+PrifxSum+ SW
class Solution { 
    public int numberOfSubarrays(int[] nums, int k) {
        int count=0;
        HashMap<Integer,Integer> map=new HashMap<>();  // creat Hashmap
        map.put(0,1);                                 //put sum=0 initially in map having count =1
        int prfxOddCount=0;
        for(int i=0;i<nums.length;i++)
        {    
             prfxOddCount+=(nums[i] % 2);//odd num give 1 in crease count
            
            if(map.containsKey( prfxOddCount-k)){     //check sum-k present
                count+=map.get( prfxOddCount-k);         // if present aad its count
            }
            map.put( prfxOddCount,map.getOrDefault( prfxOddCount,0)+1);    //add sum,count if bydefalt give 0 then it should be 1
        }

        return count;
        
    }
}
