Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.
A subarray is a contiguous part of the array.
Example 1:
Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]

Example 2:
Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length
_______________________________________________________________________________

//Sliding window with Strict Constraints "=" idea-> Prifix sum + HashMap + SW
class Solution {  
    public int numSubarraysWithSum(int[] nums, int goal) {
     int pxsum=0;
     HashMap<Integer,Integer> mp=new HashMap<>();   //contain count of occurence of same prefix sum
     int res=0;
     //1 put (0,1) in Map 
     mp.put(0,1);
     for(int i=0;i<nums.length;i++){
         pxsum += nums[i];
         res += mp.getOrDefault(pxsum-goal,0);
         mp.put(pxsum,mp.getOrDefault(pxsum,0)+1);
     }

      return res;
    }
}
