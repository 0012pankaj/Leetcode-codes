Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.
Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
_______________________________________________________________________________________________________________________________________
// for sun=bsequience we use pick and not pic method...
1)Memoization

class Solution {  
    public int lengthOfLIS(int[] nums) {
        int dp[][]=new int[nums.length+1][nums.length+1];
        for(int r[]: dp){
            Arrays.fill(r,-1);
        }

        return solveLIS(nums,-1,0,dp);
        
    }
    public static int solveLIS(int[] nums,int prevIndex,int currentIndex,int[][] dp){
        if(currentIndex >= nums.length) return 0;
        
        if(prevIndex !=-1 && dp[prevIndex][currentIndex]!=-1){
            return dp[prevIndex][currentIndex];
        }
        //pick 
        int pick=0;
        if(prevIndex==-1 ||nums[prevIndex] < nums[currentIndex]){
              pick= 1+solveLIS(nums,currentIndex,currentIndex+1,dp);
        }
        //notpick
        int notpick= solveLIS(nums,prevIndex,currentIndex+1,dp);
        
         if(prevIndex !=-1 )
           dp[prevIndex][currentIndex]=Math.max(pick,notpick);

      return Math.max(pick,notpick);

    }
}
________________________________________________________________________________________________________________
 2) Tabulization bottom up DP  
 //dp[i]=>LIS at ith index

 
class Solution { 
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        int dp[]=new int[n];
        Arrays.fill(dp,1);
        int anslis=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                     dp[i]=Math.max(dp[i],dp[j]+1);
                     anslis=Math.max(anslis,dp[i]);
        }    
        
    }
     
}
 return  anslis;
  }
}
