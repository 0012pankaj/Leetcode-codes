class Solution {  //similar to count the no. subset with given diff ..involve code of (count subset sum)
    public int findTargetSumWays(int[] arr, int target) {
         target=Math.abs(target);
           //1. calculate req_sum
        int arrsum=0;
        for(int i :arr) arrsum+=i;
        int Totalsum=(target+arrsum); //totla sum

        if(Totalsum %2 ==1)return 0; //extra condition if odd not divide by 2
        int req_sum=Totalsum/2;

        //2.all CountSubsetSum with this sum 
      return  CountSubsetSum(arr,arr.length,req_sum);
    }


     //2.CountSubsetSum code....
    public int CountSubsetSum(int arr[],int N, int sum) 
	{ 
	     int  dp[][] =new int[N+1][sum+1]; //1.change bool->int
        //  int mod=1000_000_007;                                            
        for(int i=0;i<N+1;i++){
             for(int j=0;j<sum+1; j++){
                 if(i==0){
                     dp[i][j]=0;
                 }
                 if(j==0){
                      dp[i][j]=1;
                 }
             }
         }
         
                                                                      
         
          for(int i=1;i<N+1;i++){
             for(int j=0;j<sum+1; j++){  //2.change start j loop with 0 insted of 1
                if(arr[i-1] <= j){  //pick            //not pick
                        dp[i][j]=(dp[i-1][j-arr[i-1]] + dp[i-1][j]); //3.change || --> +
                }else{
                         dp[i][j]=dp[i-1][j];                  //not pick item is greater
                }
             }
         }
         
         return dp[N][sum];
	} 
}
