class Solution {
    public boolean canPartition(int[] nums) {
        int n=nums.length;
         int tsum=0;
        for(int i=0;i<n;i++){
           tsum+=nums[i];
        }

        if(tsum%2!=0){
            return false;
        }
            int target=tsum/2;
           
            int dp[][]=new int[n][target+1];
            for(int[] row: dp){
                Arrays.fill(row,-1);
            } 
             
           //call DP Subsequence/subset Algo --> return true if arr contain sum with target
            Boolean ans=subsetSumtarget(nums,n-1,target,dp);

        

        return ans;
        
    }
    public static boolean  subsetSumtarget(int[] nums,int indx,int target,int[][] dp){


     if(target==0)return true;

     if(indx==0)return nums[indx]==target;

     //dp case
     if(dp[indx][target]!=-1){
           return  dp[indx][target]== 0 ? false : true;
     }
    
    //not take element but decrease index
     boolean not_take=subsetSumtarget(nums,indx-1,target,dp);

    //take element  decrease index and target
    boolean take=false;
    if(nums[indx] <= target)
    take=subsetSumtarget(nums,indx-1,target-nums[indx],dp);

    dp[indx][target]= take || not_take ? 1 : 0;
     
    return take || not_take;

    }
}

//Time Complexity: O(N*K) + O(N)
