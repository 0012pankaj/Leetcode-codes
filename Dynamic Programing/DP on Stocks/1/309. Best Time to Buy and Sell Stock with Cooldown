//similar to B&S II  only change is when you sell the stock just move index+2 ,basecase(i==price.length+1) return 0

class Solution {   
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int dp[][]=new int[n][2]; 
        for(int i=0;i<n;i++){
                Arrays.fill(dp[i],-1);
            }
        

        return solve(0,0,prices,dp);
    }
   
    public int solve(int i,int buy,int[] price,int[][] dp){
        if(i==price.length ||i==price.length+1) //change i==price.length+1
          return 0;
        
        if(dp[i][buy]!= -1){
            return dp[i][buy];
        }
        //if buy is 0 then buy stock
        //if buy is 1 sell stock
        int profit=0;
        if(buy==0){
           int buyit=-price[i]+solve(i+1,1,price,dp); 
           int skipit=0+solve(i+1,0,price,dp);
           profit=Math.max(buyit,skipit);
        }
        //if buy is 1 sell stock
        if(buy==1){
             int sellit=+price[i] + solve(i+2,0,price,dp);// change index+2 after sell
             int skipit=0+solve(i+1,1,price,dp);
              profit=Math.max(sellit,skipit);
        }

        return dp[i][buy]=profit;

    }
}

/*conditions:-
1) buy->0 allowed to buy ,not Allowed to Sell
   ->1 not allowed to buy,Allowed to sell
2) in buy if buy do (-price[i]) & change buy symbol to 1 ,in skip 0 & remain same
3)in sell if sell do(+price[i])  & change buy symbol to 0 ,in skip 0 & remain same
4)find max profit

*/
