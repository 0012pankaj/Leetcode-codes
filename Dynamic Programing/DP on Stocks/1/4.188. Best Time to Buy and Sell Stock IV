

You are given an integer array prices where prices[i] is the price of a given stock on the ith day,
and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. 
you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously 
(i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

1 <= k <= 100
1 <= prices.length <= 1000
0 <= prices[i] <= 1000
______________________________________________________________________________________________________________
class Solution {                       //same as previous here limit is k
                                       // 3D dp  index,buy,limit (at most K transactions.) limit =K;
    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        int dp[][][]=new int[n][2][k+1]; 
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }

        return solve(0,0,k,prices,dp);
    }
   
    public int solve(int i,int buy,int limit,int[] price,int[][][] dp){
        if(i==price.length || limit == 0) 
          return 0;
        
        if(dp[i][buy][limit]!= -1){
            return dp[i][buy][limit];
        }
        //if buy is 0 then buy stock
        //if buy is 1 sell stock
        int profit=0;
        if(buy==0){
           int buyit=-price[i]+solve(i+1,1,limit,price,dp); //(-)
           int skipit=0+solve(i+1,0,limit,price,dp);
           profit=Math.max(buyit,skipit);
        }
        //if buy is 1 sell stock
        if(buy==1){
             int sellit=+price[i] + solve(i+1,0,limit-1,price,dp);//(+)
             int skipit=0+solve(i+1,1,limit,price,dp);
              profit=Math.max(sellit,skipit);
        }

        return dp[i][buy][limit]=profit;

    }
}
