#no dp used tc-->O(n)
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104

_______________________________________________________________________________________
class Solution {  //using normal loop  tc-->O(n) sp--->O(1)
    public int maxProfit(int[] prices) {
        int profit=0;
        for(int i = 1 ; i<prices.length ;i++){
            if(prices[i]>prices[i-1]){
                profit+=(prices[i]-prices[i-1]);
            }
            
        }
        return profit;
    
    }
}
___________________________________________________________________
using Dp ,Recursion give TLE

class Solution {   
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int dp[][]=new int[n][2]; 
        for(int i=0;i<n;i++){
                Arrays.fill(dp[i],-1);
            }
        

        return solve(0,0,prices,dp);
    }
   
    public int solve(int i,int buy,int[] price,int[][] dp){
        if(i==price.length ) 
          return 0;
        
        if(dp[i][buy]!= -1){
            return dp[i][buy];
        }
        //if buy is 0 then buy stock
        //if buy is 1 sell stock
        int profit=0;
        if(buy==0){
           int buyit=-price[i]+solve(i+1,1,price,dp); //(-)
           int skipit=0+solve(i+1,0,price,dp);
           profit=Math.max(buyit,skipit);
        }
        //if buy is 1 sell stock
        if(buy==1){
             int sellit=+price[i] + solve(i+1,0,price,dp);//(+)
             int skipit=0+solve(i+1,1,price,dp);
              profit=Math.max(sellit,skipit);
        }

        return dp[i][buy]=profit;

    }
}
_____________________________________________________________________________________________________________
/*conditions:-
1) buy->0 allowed to buy ,not Allowed to Sell
   ->1 not allowed to buy,Allowed to sell
2) in buy if buy do (-price[i]) & change buy symbol to 1 ,in skip 0 & remain same
3)in sell if sell do(+price[i])  & change buy symbol to 0 ,in skip 0 & remain same
4)find max profit

tc-->O(n)
sp-->O(n) 
Time Complexity: O(N*2) 

Reason: There are N*2 states therefore at max ‘N*2’ new problems will be solved and we are running a for loop for ‘N’ times to calculate the total sum

Space Complexity: O(N*2) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*2)).
