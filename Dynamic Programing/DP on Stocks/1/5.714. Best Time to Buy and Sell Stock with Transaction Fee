

You are given an array prices where prices[i] is the price of a given stock
on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions 
as you like, but you need to pay the transaction fee for each transaction.

Note:

You may not engage in multiple transactions simultaneously (i.e., you must sell the stock 
before you buy again).
The transaction fee is only charged once for each stock purchase and sale.
 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 

Constraints:

1 <= prices.length <= 5 * 104
1 <= prices[i] < 5 * 104
0 <= fee < 5 * 104



_-----------------------------------------------------------------------------------------------------------
//similar to B&S II  only change is subtract Fess when 1 transaction complete on Sell
class Solution {   
    public int maxProfit(int[] prices,int Fee) {
        int n=prices.length;
        int dp[][]=new int[n][2]; 
        for(int i=0;i<n;i++){
                Arrays.fill(dp[i],-1);
            }
        

        return solve(0,0,prices,dp,Fee);
    }
   
    public int solve(int i,int buy,int[] price,int[][] dp,int Fee){
        if(i==price.length ) 
          return 0;
        
        if(dp[i][buy]!= -1){
            return dp[i][buy];
        }
        //if buy is 0 then buy stock
        //if buy is 1 sell stock
        int profit=0;
        if(buy==0){
           int buyit=-price[i]+solve(i+1,1,price,dp,Fee);           
           int skipit=0+solve(i+1,0,price,dp,Fee);
           profit=Math.max(buyit,skipit);
        }
        //if buy is 1 sell stock
        if(buy==1){
             int sellit=+price[i]-Fee + solve(i+1,0,price,dp,Fee);         //only change -Fee if sell 
             int skipit=0+solve(i+1,1,price,dp,Fee);
              profit=Math.max(sellit,skipit);
        }

        return dp[i][buy]=profit;

    }
}

/*conditions:-
1) buy->0 allowed to buy ,not Allowed to Sell
   ->1 not allowed to buy,Allowed to sell
2) in buy if buy do (-price[i]) & change buy symbol to 1 ,in skip 0 & remain same
3)in sell if sell do(+price[i])  & change buy symbol to 0 ,in skip 0 & remain same
4)find max profit

*/
