You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously
(i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105
__________________________________________________________________________________________________________
Recursive Approch--------->TLE
class Solution {  // 3D dp  index,buy,limit (at most two transactions.) limit =2;
    public int maxProfit(int[] prices) {
        int n=prices.length;

        return solve(0,0,2,prices);
    }
    
    public int solve(int i,int buy,int limit,int[] price){
        if(i==price.length || limit == 0) 
          return 0;
        
                                                                 //if buy is 0 then buy stock
           int profit=0;                                                      //if buy is 1 sell stock
        if(buy==0){
           int buyit=-price[i]+solve(i+1,1,limit,price);           //(-price[i])
           int skipit=0+solve(i+1,0,limit,price);
           profit=Math.max(buyit,skipit);
        }
       
        if(buy==1){
             int sellit=+price[i] + solve(i+1,0,limit-1,price);      //(+price[i] )
             int skipit=0+solve(i+1,1,limit,price);
              profit=Math.max(sellit,skipit);
        }

        return profit;

    }
}
____________________________________________________________________________________
Memoization 3D DP*******

class Solution {  // 3D dp  index,buy,limit (at most two transactions.) limit =2;
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int dp[][][]=new int[n][2][3]; 
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }

        return solve(0,0,2,prices,dp);
    }
   
    public int solve(int i,int buy,int limit,int[] price,int[][][] dp){
        if(i==price.length || limit == 0) 
          return 0;
        
        if(dp[i][buy][limit]!= -1){
            return dp[i][buy][limit];
        }
        //if buy is 0 then buy stock
        //if buy is 1 sell stock
        int profit=0;
        if(buy==0){
           int buyit=-price[i]+solve(i+1,1,limit,price,dp); //(-)
           int skipit=0+solve(i+1,0,limit,price,dp);
           profit=Math.max(buyit,skipit);
        }
        //if buy is 1 sell stock
        if(buy==1){
             int sellit=+price[i] + solve(i+1,0,limit-1,price,dp);//(+)
             int skipit=0+solve(i+1,1,limit,price,dp);
              profit=Math.max(sellit,skipit);
        }

        return dp[i][buy][limit]=profit;

    }
}
_________________________________________________________________________
Time Complexity: O(N*2*3) 

Reason: There are N*2*3 states therefore at max ‘N*2*3’ new problems will be solved.

Space Complexity: O(N*2*3) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 3D array ( O(N*2*3)).
