The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.

For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.
Given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).

A subsequence of an array is a new array generated from the original array by 
deleting some elements (possibly none) without changing the remaining elements' relative order. 
For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.

 

Example 1:

Input: nums = [4,2,5,3]
Output: 7
Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.
Example 2:

Input: nums = [5,6,7,8]
Output: 8
Explanation: It is optimal to choose the subsequence [8] with alternating sum 8.
Example 3:

Input: nums = [6,2,1,2,4,5]
Output: 10
Explanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.
 ___________________________________________________________________________________(1) Memoization Top down__________________________________________-

 class Solution {
    public long maxAlternatingSum(int[] nums) {
      long dp[][]=new long[100001][2];
       for(long r[]:dp){
           Arrays.fill(r,-1);
           
       }

        return maxAlternatingSum_h(nums,0,true,dp);
    }
    public static long maxAlternatingSum_h(int[] nums,int i,boolean flag,long[][] dp){

     if(i>=nums.length) return 0;
     if(dp[i][flag?0:1]!=-1) return dp[i][flag? 0:1];
     
     long notpick=maxAlternatingSum_h(nums,i+1,flag,dp); //flag-->true = (+) even ,false = (-)odd

     //to pick  flag change  and add number vith alter sign understand while making tree
     int  val=nums[i];
     if(flag == false){
         val=-val;
     }


     long pick=val+maxAlternatingSum_h(nums,i+1,!flag,dp);
     

       return dp[i][flag ? 0:1]=Math.max(pick,notpick);
    }
}
______________________________________________________________(2) Tabulation_______________________________---

class Solution {
    public long maxAlternatingSum(int[] nums) {
        int n=nums.length;
    long  dp[][]=new long[n+1][2]; //nums.length+1 to neglext negative index outof bound 
                                            //+1, means we start index from 1

     for(int i=1;i<n+1;i++){
         
         //get even length subsequence result (-)
         dp[i][0]=Math.max(dp[i-1][1]-nums[i-1],dp[i-1][0]);

          //get odd length subsequence result(+)
         dp[i][1]=Math.max(dp[i-1][0]+nums[i-1],dp[i-1][1]);
     }     

     return Math.max(dp[n][0],dp[n][1]);                                  
    }
}
