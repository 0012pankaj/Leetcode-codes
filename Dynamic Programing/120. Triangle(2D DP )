class Solution { //using 2D DP Memorization  tc->O(n2) sp-->O(n2)
    public int minimumTotal(List<List<Integer>> triangle) {
       int n=triangle.size();
       int dp[][]=new int[n][n];

       for(int row[]: dp){
         Arrays.fill(row,-1);
       }
        return minimumTotal_sol(triangle,0,0,dp,n);
    }

    public static int minimumTotal_sol(List<List<Integer>> triangle,int i,int j,int[][] dp,int n){  
        if(dp[i][j] != -1) return dp[i][j];
        
        if(i==n-1)return triangle.get(i).get(j);

        int down_sum= triangle.get(i).get(j)+minimumTotal_sol(triangle,i+1,j,dp,n);
        int dignal_sum= triangle.get(i).get(j)+minimumTotal_sol(triangle,i+1,j+1,dp,n);

        return dp[i][j]=Math.min(down_sum,dignal_sum);

    }
}
