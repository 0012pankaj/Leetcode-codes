You are given the root of a binary search tree (BST), where the values of exactly
two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.
_____________________________________________---
class Solution {

     TreeNode first=null,prev=null,second=null;
     
         public void findNode(TreeNode root)
         {  
             if(root==null) return;
                                                                     //inorder[left root right]
             findNode( root.left);
            if(prev!=null && prev.val > root.val )                        //if previous value is greater than current then  previous is our that first node  
            {
                if(first==null)                                   //if first is null means no first node is found yet
                { 
                    first=prev;                                    //then assighn first prev ti first node
                }
                second=root;      
            }
             prev=root;                                              //made current root as previous for next itration

             findNode(root.right);
         }

    public void recoverTree(TreeNode root) {
        if(root==null) return;
        findNode(root);                                             //finding those two node using inoder treversel
       int temp=first.val;                                        //swaping values of those node
       first.val=second.val;
       second.val=temp; 
    }                                                              //tc-->o(n)
}

approch----------------------------
Here, we leverage the fact that Inorder Traversal of a BST gives a sorted list of elements.
If there are exactly 2 swapped nodes, we can check the mistake in the inorder traversal.
For eg.,
root = [6,2,5,null,null,null,3]
Inorder traversal: [2,6,5,3] (Not sorted).

First incorrect node/element is 6 because 6 > 5 (first == null && prev > curr) => prev is the first node.
Second incorrect node/element is 3, because 5 > 3 (first != null && prev > curr), curr is the second node.
To cover the edge-case of 2 consecutive elements to be swapped, we always assign second = curr.
Hence, after swapping, the root becomes: [2,3,5,6].
