Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.:
“The lowest common ancestor is defined between two nodes p and q as the lowest 
node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
______________________________________________________________________________________________Tc-->O(n) Sp-->O(n)
/* Idea: we find a point where one of them lies in left and one of them lies in right and return that point*/
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
         if(root==null) return null;
         int curr=root.val;
                                                           //check weather both of them lies in right
          if(curr < p.val && curr < q.val) 
          return lowestCommonAncestor(root.right,p, q);

                                                               //check weather both of them lies in left
          if(curr > p.val && curr > q.val) 
          return lowestCommonAncestor(root.left,p, q);

                                                                //if both of them not lies in left or right it means
                                                               //one lies in left and one lied in right
           return root;
    }
}
