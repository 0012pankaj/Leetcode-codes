Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.
_____________________________________________________________________________________________
class Solution {
    public void storeinset(TreeNode root,ArrayList<Integer> l)
    { 
        if(root==null) return; //indorder[left root right]
        storeinset(root.left,l);
         l.add(root.val);
        storeinset(root.right,l);

    }
    public boolean findTarget(TreeNode root, int k) {
        if(root==null) return false;
        ArrayList<Integer> l=new ArrayList<Integer>();
        storeinset(root,l);

        //two pointer
        int s=l.size();
        int i=0;
        int j=s-1;
        while(i<j)
        {    int sum=l.get(i)+l.get(j);
            if(sum== k)
               return true;
            else if(sum < k) 
               i++;
            else 
               j--;
        }

        return false;
    }
}
//TC-->O(N)+O(N)
//Sp--.O(N)
/*Approch:
store all node in array list using inorder traversal that give [SORTED LIST]
apply two pointer approch*/
