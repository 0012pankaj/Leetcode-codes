
1. my first approch:-
public boolean isValid(String x) {
       
        Stack<Character> stk=new Stack<Character>();
       int  i=0;
        while(i<x.length())
        {  
             if(x.charAt(i)=='{' ||x.charAt(i)=='('||x.charAt(i)=='['){
                 stk.push(x.charAt(i));
             }
             else if(x.charAt(i)=='}'){
                 if(!stk.isEmpty() && stk.peek()=='{' ){
                     stk.pop();
                 }else{
                     return false;
                 }
             }
              else if(x.charAt(i)==')'){
                 if(!stk.isEmpty() && stk.peek()=='('){
                     stk.pop();
                 }else{
                     return false;
                 }
             } else if(  !stk.isEmpty() && x.charAt(i)==']'){
                 if(stk.peek()=='['){
                     stk.pop();
                 }else{
                     return false;
                 }
             }else
             
             return false;
            
            i++;
        }
        if(!stk.isEmpty()){
             return false;
        }
       return true;
    }
    ...........................................................
    small code:-
    
       Stack<Character> st=new Stack<Character>();
          for(char a:s.toCharArray())
        {
           
			//Check if stack not empty and the top element corresponds to curr char
            if(!st.isEmpty() && (st.peek()==a-1 || st.peek()==a-2))
                st.pop();
			//else these migh be starting brackets or unsatisfied closing brackets
            else
                st.push(a);
        }
           
           return st.isEmpty();
