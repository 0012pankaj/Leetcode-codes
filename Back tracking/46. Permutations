Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

______________________________________________________________________________

class Solution {

    public static void permutation(int[] nums,List<Integer> list,List<List<Integer>> ans,boolean[] mark)
    {   //base case
        if(list.size()==nums.length)
        {
            ans.add(new ArrayList<>(list));
            return;
        }

       for(int i=0;i<nums.length;i++)
     {  
         if(mark[i]==false)
         {
             mark[i]=true;
             list.add(nums[i]);
             permutation(nums,list,ans,mark);
             list.remove(list.size()-1);  //back track
             mark[i]=false;
         }

     }

    }
//START----->
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        //take boolean array to map 
        
        boolean[] mark=new boolean[nums.length];

        permutation(nums,list,ans,mark);

     return ans;
    }
}

/*Approch:-
using a boolean array to mark if it that element is used not take*/
