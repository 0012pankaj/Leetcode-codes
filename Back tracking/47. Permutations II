Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
 ______________________________________________________________________________________________

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
         List<List<Integer>> ans=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        //take boolean array to map 
        
        boolean[] mark=new boolean[nums.length];

        permutation(nums,list,ans,mark);
       return ans;
    }

    //___________________________
    public static void permutation(int[] nums,List<Integer> list,List<List<Integer>> ans,boolean[] mark)
    {
        if(list.size()==nums.length)
        {   if(!ans.contains(list)){
             ans.add(new ArrayList<>(list));
            }       
            return;
        }

     for(int i=0;i<nums.length;i++)
     {  
         if(mark[i]==false)
         {
             mark[i]=true;
             list.add(nums[i]);
             permutation(nums,list,ans,mark);
             list.remove(list.size()-1);  //back track
             mark[i]=false;
         }

     }

    }
}
