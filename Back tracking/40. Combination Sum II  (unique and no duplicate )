class Solution {

      public static void helper(int[] can, int target,  List<Integer> list,int idx, List<List<Integer>> ans)
    {      //base case
           if(target == 0 ) 
           {   ans.add(new ArrayList<Integer>(list));  //point to remember -->Always return list in list using new location 
                                                      // other wise it give empty list of list, as we  are removing the item after recursion 
                   return;                                //call that remove the element from same location so we use new location to store and send
           }                                      
         
        
        for(int i=idx ;i<can.length;i++)
        {    //extra case to hendel duplicate
             if(i != idx && can[i-1]== can[i])  // agar vo first elemnent ni h or apne piche vale k equal h to skip kro ise*** 
              continue;                         //this case avoid dublicase

             if(target >= can[i]) {
                 list.add(can[i]);                          //due to this we do back tracking so right opp statment after call
                 helper(can,target-can[i],list,i+1,ans);   //use [i+1] ** for combination [i] for permutation 
                 list.remove(list.size()-1);               //remove the lst element which we add
             }
        } 
       
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
         
    List<List<Integer>> ans=new ArrayList<>();
    List<Integer> list=new ArrayList<Integer>();

     Arrays.sort(candidates);
     helper(candidates,target,list,0,ans);       
      return ans;  
    
    }
}

