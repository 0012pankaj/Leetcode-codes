
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null)
        {
            return new ArrayList<>() ;
        }
                                                                            // list to hold all levels
        List<List<Integer>> list=new ArrayList<>();
     
                                                                          //  Step1:  queue to hold nodes at each level
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);                                                     // Add the root node to the queue

        //step2:                                                    // Iterate over the queue until it's empty
        while(! q.isEmpty())
        {     
             int count=q.size();                                    // Get the number of nodes at the current level
             List<Integer> l=new ArrayList<>();                // Create a sublist to hold the values of the nodes at the current level
            for(int i=0; i<count;i++)                           // Iterate over the number of nodes at the current level
            {  
                TreeNode curr=q.poll();
                if(curr.left != null){  q.add(curr.left);}
                                                                // If the left/right child of the current node is not null, add it to the queue
                if(curr.right != null) { q.add(curr.right); } 
                 
                                                                  // Add the current node's value to the sublist
                l.add(curr.val);
            }

                                                                       // Add the sublist to the ans list
            list.add(l);

        }

                    //return ans list
      return list;  
    }
}                       //tc-->O(n)   Sp-->O(n)
