                                                           //Tc-->O(N) sp-->O(N)  Best approch

___________________________________________--------stiver aproch (hashmap inside)
class Solution {
    public TreeNode helper(int[] inorder,int[] pretorder,int istart,int iend,int pstart,int pend,
    HashMap<Integer,Integer> map){
        if(pstart>pend || istart>iend) return null;
         
         TreeNode root= new TreeNode(pretorder[pstart]);
         int midroot=map.get(pretorder[pstart]);
         int leftnum=midroot-istart;

        root.left=helper(inorder,pretorder,istart,midroot-1,pstart+1,pstart+leftnum,map);
        root.right=helper(inorder,pretorder,midroot+1,iend,pstart+leftnum+1,pend,map);

       return root;
    }

    public TreeNode buildTree( int[] preorder,int[] inorder) {
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inorder.length;i++)
        {
            map.put(inorder[i],i);
        }
           
        TreeNode root=helper(inorder,preorder,0,inorder.length-1,0,preorder.length-1,map);//return root of tree

        return root;
        
    }
    
____________________________________________________________________-(hashMap,outside)
class Solution { 
   
    int index = 0;
    Map<Integer, Integer> map = new HashMap<>();

    public TreeNode buildTree(int[] preorder, int[] inorder) {

        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }
    
        TreeNode root=helper(preorder, 0, preorder.length - 1);

        return root;
    }

    private TreeNode helper(int[] preorder, int left, int right) {
        if (left > right) {
            return null;
        }

        int rootValue = preorder[index++];
        TreeNode root = new TreeNode(rootValue);

        int position=map.get(rootValue);
        root.left = helper(preorder, left, position - 1);
        root.right = helper(preorder,position + 1, right);

        return root;
    }
}

/* logic: we find root value in preorder array and its left sub element amnd right sub element in 
Inorder array
Approch: 
1.create a map that contain inorder value with thare index
2.every element of preorder give root value (we treverse through preorder using indexdiclare globaly) and 
we find that root ' position value in inorder array /hash
all the left element of position is element of subtree of left and 
all the right elements of position is element of subtree of right.   Tc-->O(N) sp-->O(N)  Best approch   #love bubber
