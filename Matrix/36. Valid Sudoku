class Solution {
    public boolean isValidSudoku(char[][] board) {
        //using HashSet
        int n=board.length;
        if(n!=9) return false;

        //check raw wise
        HashSet<Character> h=new HashSet<>();
        for(int i=0;i<n;i++){
            
            for(int j=0;j<n;j++){
                if(board[i][j]!='.' && h.contains(board[i][j])){
                    return false;
                }
                h.add(board[i][j]);
                     
            }
           h.clear();
        }

        //chec call wise
        HashSet<Character> h2=new HashSet<>();
         for(int i=0;i<n;i++){
            
            for(int j=0;j<n;j++){
                if(board[j][i]!='.' && h2.contains(board[j][i])){
                    return false;
                }
                    h2.add(board[j][i]);  
            }
             h2.clear();
        }
       
           
        

         // Check sub-boxes
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                Set<Character> seen = new HashSet<>();
                int r=i-i%3;
                 int c=j-j%3;
                for (int k = r; k < r+3; k++) {
                     for (int l=c;  l< c+3; l++) {
                         char digit = board[k][l];
                    if (digit != '.' && seen.contains(digit)) {
                        return false;
                    }
                    seen.add(digit);
                }
            }
        }
        }
        return true;

    }

   
}
