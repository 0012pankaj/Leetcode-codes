class Solution {
    public int numMagicSquaresInside(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        if(n<3 || m<3){
            return 0;
        }
         
         int count=0;
        for(int i=0;i<n-2;i++){
            for(int j=0;j<m-2;j++){
                if(checkgrid(grid,i,j)){
                    count++;
                }
            }
        }

        return count;
        
    }
    public static boolean checkgrid(int[][] grid,int r,int c){
       int sum=0;
       
          sum=grid[r][c]+grid[r][c+1]+grid[r][c+2];
      
       int sum2=0;
        
          sum2=grid[r][c]+grid[r+1][c]+grid[r+2][c];
     
        if(sum != sum2){
         return false;
        }
       int  sum3=0;
 
        sum3=grid[r][c]+grid[r+1][c+1]+grid[r+2][c+2];
         

        if( sum3 != sum && sum3 !=sum2){
         return false;
        }
       
       HashSet<Integer> hs=new HashSet<>();
         for(int i=r;i<r+3;i++){
             for(int j=c;j<c+3;j++){
               if(grid[i][j] < 1 || grid[i][j]>9) {
                 return false;
               }
               
              hs.add(grid[i][j]);
          
         }
         }

         if(hs.size()!=9)return false;


        return true;
    }
}
