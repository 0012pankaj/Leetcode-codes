iven a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.

Return the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 109 + 7.

 
 _______________________________________________________________

class Solution {
    public int numWays(String s) {
    long n=s.length();
    long ones=0;
    long mod=1_000_000_007;
                                                     //count no. ones
    for(char c:s.toCharArray())
        ones += (c-'0') ;

                                                                             //if thre is no 1 return [n-1 C r] ways
    if(ones == 0) return  (int)((((n-1)*(n-2))/2)% mod);  

                                                                          //if there improper ones 
     if(ones % 3 !=0) return 0; 

                                                                     // now its time to count ways we can divide it
     long ways1=0;
     long ways2=0;
 
     long onethird=ones/3;
     ones=0;

    for(char c:s.toCharArray())
    {
        ones += (c-'0') ;

        if(ones == onethird ) ways1++;                      //tc-->O(n)     
   if(ones == 2*onethird) ways2++;

    }

   return   (int)((ways1 * ways2)%mod);
    }
}
//help..yt--> cp addict
/*
1. Count the total number of the 1s, if not divisible by 3, then return 0;
2.If the count is 0, then we can choose 1st 0 as our 1st cut, correspondingly, the 2nd cut between the other 2 non-empty subarrays will have n - 2 options, where n = s.length(); Similarly, we can also choose 2nd 0 as 1st cut, then we have n - 3 options for the 2nd cut, ..., etc, totally, the result is (n - 2) + (n - 3) + ... + 2 + 1 = (n - 2) * (n - 1) / 2;
3.Otherwise, traverse the input array: count the 1s again, if the count reaches the 1 / 3 of the totoal number of 1s, we begin to accumulate the number of the ways of the 1st cut, until the count is greater than 1 / 3 * total ones; when the count reaches the 2 / 3 of the total number of the 1s, start to accumulate the number of the ways of the 2nd cut, until the count is greater than 2 / 3 * total ones;
4.Multification of the numbers of the ways of 1st and 2nd cuts is the result..*/
