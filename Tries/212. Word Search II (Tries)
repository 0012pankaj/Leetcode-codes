Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells,
where adjacent cells are horizontally or vertically neighboring. The same letter
cell may not be used more than once in a word.

Example 1:
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], 
words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
________________________________________
Approch :- Using Tries  insted of T/F in isTerminal we store complete word
1.first create node 
2.Insert All given words in Tries
3.itrate over matrix if tries root'child contain respective character then search in tries & board
4 word present in terminal so add that in list
_____________________________________________________________________________________________

class Solution { //Using Trie
    
    static class Node {                               //1
		char data;
		String isTerminal = null;
		HashMap<Character, Node> child = new HashMap<>();
	}
    static List<String> ll = new ArrayList<>();

 //start------------>
    public List<String> findWords(char[][] board, String[] words) {
        Node root = new Node();
        ll = new ArrayList<>();
		for (String s : words) {
			insert(root, s);
		}
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				if (root.child.containsKey(board[i][j])) {
					wordsearch(board, i, j, root);
				}
			}
		}

        return ll;
    }

	public static void insert(Node root, String word) {  //2
		Node curr = root;
		for (int i = 0; i < word.length(); i++) {
			char ch = word.charAt(i);
			if (curr.child.containsKey(ch)) {
				curr = curr.child.get(ch);
			} else {
				Node nn = new Node();
				nn.data = ch;
				curr.child.put(ch, nn);
				curr = nn;
			}
		}
		curr.isTerminal = word;

	}
    	

	private static void wordsearch(char[][] board, int r, int c, Node root) { //3
		// TODO Auto-generated method stub
		if (r < 0 || c < 0 || r >= board.length ||
				c >= board[0].length || !root.child.containsKey(board[r][c])) {
			return;
		}

		char ch = board[r][c];
		Node curr=root.child.get(ch);
		if(curr.isTerminal!=null) {  //word present in terminal so add that in list
			ll.add(curr.isTerminal);
			curr.isTerminal=null;
		}

		board[r][c]='*'; //for backtrack
		wordsearch(board, r + 1, c, curr);
		wordsearch(board, r - 1, c, curr);
		wordsearch(board, r, c + 1, curr);
		wordsearch(board, r, c - 1, curr);
		board[r][c]=ch;
	}
}
___________________________________________________________________________________________________
