You are given a 0-indexed integer array nums.

The low score of nums is the minimum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
The high score of nums is the maximum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
The score of nums is the sum of the high and low scores of nums.
To minimize the score of nums, we can change the value of at most two elements of nums.

Return the minimum possible score after changing the value of at most two elements of nums.

Note that |x| denotes the absolute value of x
___________________________________________________________________________________



class Solution {
    public int minimizeSum(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        
        int A=Math.min(nums[n-3]-nums[0],nums[n-2]-nums[1]);
        int B=Math.min(nums[n-1]-nums[2],A);
        int C=Math.min(nums[n-1]-nums[0],B);
        
        return C;
        
    }
}
______________________

/*
Sort the vector to focus mainly on minimum and maximum values.
Find the cases where we can minimize the score
Minimum diff can always be made 0
To minimize the maximum value there can be
three cases possible:

First and last element can be made equal to its adjacent value.
First 2 elements can be made equal to 3rd elemnt.
Last 2 elements can be made equal to last but 3rd element.
Approach
sort the vector
find the minimum value from all the three cases possible
Complexity
Time complexity: O(nlog(n))
Space complexity: O(1)
*/
