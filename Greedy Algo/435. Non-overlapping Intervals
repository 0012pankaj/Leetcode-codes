Given an array of intervals intervals where intervals[i] = [starti, endi], return 
the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
Example 1:
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

Example 2:
Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105 (nlogn)
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104
___________________________________________________________________________________________________________
 //Approch :like 2 pointer approch after sorting

class Solution {
    public int eraseOverlapIntervals(int[][] intvl) {
    int n=intvl.length;
    Arrays.sort(intvl,(a,b)->(a[0]-b[0]));
   
    if(n==1) return 0;
    int cs=intvl[0][0];
    int ce=intvl[0][1];
    int count=0;
    for(int i=1;i<n;i++){
         int ns=intvl[i][0];
         int ne=intvl[i][1];
        
        if(ce > ns ){
            if(ce >= ne ){
               cs=ns;
               ce=ne;
            }
            count++;
        }else{
           cs=ns;
           ce=ne; 
        }
       
    }

    return count;
        
    }
}
