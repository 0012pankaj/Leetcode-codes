//Main Logic-> Create List put (Map.Entry) in List and Sort that List Accordinglya
451. Sort Characters By Frequency

Given a string s, sort it in decreasing order based on the frequency of the characters. 
The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.


Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.
_______________________________________________________________________________________________________________________________________________________-


class Solution {
    public String frequencySort(String s) {
        HashMap<Character,Integer> mp=new HashMap<>();
        
          //find frequency map
          for(int i=0;i<s.length();i++){
              mp.put(s.charAt(i),mp.getOrDefault(s.charAt(i),0)+1);
          }
          
         List<Map.Entry<Character , Integer>> eList = new ArrayList<>(mp.entrySet());            //1 .put  MapEntry in List
      
      
        eList.sort((a, b) -> b.getValue().compareTo(a.getValue()));               //2 .Sort List based on Value and Decendingorder(b-a)
         String res="";


        for (Map.Entry<Character , Integer> entry : eList) {
            int x=entry.getValue();
            while(x>0){
                  res+=entry.getKey();
                 x--;
            }
           
        }
     return res;
        
    }
}
