Given an input string (s) and a pattern (p), implement 
wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
 

Constraints:

0 <= s.length, p.length <= 2000
s contains only lowercase English letters.
p contains only lowercase English letters, '?' or '*'.

class Solution {  //Dp Memoization 
    public boolean isMatch(String s, String p) {
        Boolean dp[][]=new Boolean[s.length()][p.length()];
      
        return funcall(s,p,s.length()-1,p.length()-1,dp);       
        
    }

    public boolean funcall(String s,String p,int i,int j,Boolean dp[][]){

      if(i<0 && j<0) return true;
      if(i>=0 && j<0) return false;

       if(i<0 && j>=0){
           for(int k=0;k<=j;k++){
               if(p.charAt(k)!= '*')
                return false;
           }
           return true;
       }
       
       if(dp[i][j] != null) return dp[i][j];
       //matching
       if(s.charAt(i)==p.charAt(j) || p.charAt(j)=='?' ){
         return  dp[i][j]=funcall(s,p,i-1,j-1,dp);
       }else if(p.charAt(j)=='*'){
         return  dp[i][j]=(funcall(s,p,i-1,j,dp) ||funcall(s,p,i,j-1,dp);
       }else{
              return false;
       }
    

    }
}
#Lbubber
