///////////////Approch 1///Topdown/////////----------------Start to end -------------------------------------------------------

class Solution { //monu bhai approch
    public int rob(int[] nums) {
        int dp[]=new int[nums.length];
         Arrays.fill(dp,-1);
       return  robber(nums, 0,dp);
    }

    public static int robber(int arr[],int i,int[] dp){
    if(i>=arr.length){
        return 0;
    }

    if(dp[i]!=-1){
        return dp[i];
    }

    int robb=arr[i]+robber(arr, i+2,dp);
    int not_robb=robber(arr,i+1,dp);

    return dp[i]=Math.max(robb,not_robb);

    }
}

///////////////////////////////////Approch 2--------------------------------------End to start-----------
class Solution { //monu bhai approch
    public int rob(int[] nums) {
        int dp[]=new int[nums.length];
         Arrays.fill(dp,-1);
       return  robber2(nums,nums.length-1,dp);
    }

    public static int robber2(int arr[],int i,int[] dp){
    if(i<0){
        return 0;
    }

    if(dp[i]!=-1){
        return dp[i];
    }

    int robb=arr[i]+robber2(arr, i-2,dp);
    int not_robb=robber2(arr,i-1,dp);

    return dp[i]=Math.max(robb,not_robb);

    }
}
______________________________________________________Tabular approch----------------
class Solution {  //1d DP using tabulation method
    public int rob(int[] nums) {
        
        int n=nums.length;
        if(n==1) return nums[0];

        int dp[]=new int[n];

        dp[0]=nums[0];
        dp[1]=Math.max(nums[1],nums[0]);
       
        for(int i=2;i<n;i++){     

          int rob=nums[i] + dp[i-2];    
          int not_rob=dp[i-1];
          dp[i]=Math.max(rob,not_rob);

        }
        return dp[n-1];
    }
}
