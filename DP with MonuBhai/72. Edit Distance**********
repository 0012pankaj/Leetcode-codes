Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 ---------------------------------------------------------------------------

class Solution {
    public int minDistance(String word1, String word2) {
           int[][] dp=new int[word1.length()][word2.length()];
           for(int[] r:dp){
               Arrays.fill(r,-1);
           }

        return solve(word1,word2,0,0,dp);
    }

    public int solve(String s1,String s2,int i,int j,int[][] dp){
        //last remain elemet delete
        if(i==s1.length()){
            return s2.length()-j;
        }
        if(j==s2.length()){
            return s1.length()-i;
        }

        if(dp[i][j]!=-1){
            return dp[i][j];
        }

        int ans=0;

        if(s1.charAt(i)==s2.charAt(j)){
           return  solve(s1,s2,i+1,j+1,dp);
        }else{
             //insert
              int inst_ans=1+solve(s1,s2,i,j+1,dp);
            //delete
             int del_ans=1+solve(s1,s2,i+1,j,dp);
            //replace
             int rep_ans=1+solve(s1,s2,i+1,j+1,dp);
 
               ans= Math.min(inst_ans,Math.min(rep_ans,del_ans));
        }

        return dp[i][j]=ans;
    }
}
