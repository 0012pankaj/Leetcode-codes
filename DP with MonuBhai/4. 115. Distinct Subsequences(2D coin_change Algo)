/* Given two strings s and t, return the number of distinct subsequences of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag
 

Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters.
_____________________________________________________________________________ */

class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp=new int[t.length()+1][s.length()+1];
        for(int[] r:dp ){
            Arrays.fill(r,-1);
        }
        return coinchange_Algo(s,t,0,0,dp);
    }
    public int coinchange_Algo(String s, String  t,int i, int j,int dp[][]){
        if(i==t.length()) return 1;

        if(j==s.length()) return 0;

        if(dp[i][j]!=-1) return dp[i][j];

            int inc=0; int exc=0;
        if(s.charAt(j)== t.charAt(i)){
            //incluede
          inc=coinchange_Algo(s,t,i+1,j+1,dp);
        }   //eclusion
         exc=coinchange_Algo(s,t,i,j+1,dp);

         return dp[i][j]=inc+exc;
    }
}
