Given two strings text1 and text2, return the length of 
their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated
from the original string with some characters (can be none) 
deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.
___________________________________________________________________________________________________________________________________
1) //Approch1 Memoization  top-Down  tc-->O(2^m+n)  sp-->O(m*n)

class Solution { 
    public int longestCommonSubsequence(String s1, String s2) {
     int dp[][]=new int[1001][1001]; //given:1 <= text1.length, text2.length <= 1000
       for(int[] r:dp){
           Arrays.fill(r,-1);
       }
       
        return solveLCS(s1,s2,0,0,dp);
    }

    public static int solveLCS(String s1,String s2,int i,int j,int[][] dp){
        if(i>=s1.length() || j>=s2.length()){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        if(s1.charAt(i) == s2.charAt(j)){
            return 1+solveLCS(s1,s2,i+1,j+1,dp);
        }

        return dp[i][j]= Math.max(solveLCS(s1,s2,i+1,j,dp),solveLCS(s1,s2,i,j+1,dp));
    }
}
____________________________________________________________________________________________________________________________________
2) Bottom up Tabulation   dp[i][j]-->LCS b/w s1,s2 oflength i,j (upto i,upto j)

class Solution { //2.Approch-tabulation bottom-up
    public int longestCommonSubsequence(String s1, String s2) {

        int n=s1.length();
        int m=s2.length();
        int dp[][]=new int[n+1][m+1];

        //fill first row and col with 0

        for(int i=0;i<n;i++){
             dp[i][0]=0;
        }
         for(int j=0;j<m;j++){
             dp[0][j]=0;
        }

        //fill dp by the previous filled element

        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                if(s1.charAt(i-1) == s2.charAt(j-1))
                   dp[i][j]=1+dp[i-1][j-1];
                else{
                    dp[i][j]=Math.max(dp[i][j-1],dp[i-1][j]);
                }   
            }
        }


        return dp[n][m];
        
    }
}
