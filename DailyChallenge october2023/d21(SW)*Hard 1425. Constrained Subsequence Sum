//Approach-4 (Using Priority_queue) Accepted //type of Sliding Window ,not accept DP sol
/*
	Basically in this Approach, you want the maximum value in the range of [i, i-k]
	Why not store them in max heap and access them in one go
*/
class Solution {
    class Pair {
        int first;
        int second;

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    public int constrainedSubsetSum(int[] nums, int k) {
        int n = nums.length;
        int[] t =Arrays.copyOf(nums,n);
       
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Integer.compare(b.first, a.first));
        pq.offer(new Pair(t[0], 0));
        int maxR = t[0];

        for (int i = 1; i < n; i++) {
            while (!pq.isEmpty() && pq.peek().second < i - k) {
                pq.poll();
            }

            t[i] = Math.max(t[i], nums[i] + pq.peek().first);
            pq.offer(new Pair(t[i], i));

            maxR = Math.max(maxR, t[i]);
        }

        return maxR;
    }
}
