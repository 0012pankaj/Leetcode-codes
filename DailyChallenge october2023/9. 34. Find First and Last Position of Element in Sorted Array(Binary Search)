class Solution { //tc-->O(log(n))
    
public int[] searchRange(int[] nums, int target) {
    int[] result = new int[2];
    result[0] = findFirst(nums, target);
    result[1] = findLast(nums, target);
    return result;
}

private int findFirst(int[] nums, int target){
    int idx = -1;
    int start = 0;
    int end = nums.length - 1;
    while(start <= end){
        int mid = (start + end) / 2;
         if(nums[mid] == target) {
           idx = mid;
           end=mid-1;//to check in left side if possible
         }else if(nums[mid] > target){
            end = mid - 1;
        }else{
            start = mid + 1;
        }
       
    }
    return idx;
}

private int findLast(int[] nums, int target){
    int idx = -1;
    int start = 0;
    int end = nums.length - 1;
    while(start <= end){
        int mid = (start + end) / 2;
         if(nums[mid] == target) {
           idx = mid;
           start=mid+1;//to check in rigt side if possible ans is there
         }else if(nums[mid] > target){
            end = mid - 1;
        }else{
            start = mid + 1;
        }
       
    }
    return idx;
}
}
